Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> classdefs declarations fundefs instructions
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> <empty>
Rule 4     declaration -> TYPE inits ;
Rule 5     declaration -> id classinits ;
Rule 6     declaration -> error ;
Rule 7     inits -> inits , init
Rule 8     inits -> init
Rule 9     init -> id = expression
Rule 10    classinits -> classinits , classinit
Rule 11    classinits -> classinit
Rule 12    classinit -> id
Rule 13    instructions -> instructions instruction
Rule 14    instructions -> instruction
Rule 15    instruction -> print_instr
Rule 16    instruction -> labeled_instr
Rule 17    instruction -> assignment
Rule 18    instruction -> choice_instr
Rule 19    instruction -> while_instr
Rule 20    instruction -> repeat_instr
Rule 21    instruction -> return_instr
Rule 22    instruction -> break_instr
Rule 23    instruction -> continue_instr
Rule 24    instruction -> compound_instr
Rule 25    print_instr -> PRINT expression ;
Rule 26    print_instr -> PRINT error ;
Rule 27    labeled_instr -> id : instruction
Rule 28    assignment -> access = expression ;
Rule 29    access -> id
Rule 30    access -> id . id
Rule 31    choice_instr -> IF ( condition ) instruction
Rule 32    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 33    choice_instr -> IF ( error ) instruction
Rule 34    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 35    while_instr -> WHILE ( condition ) instruction
Rule 36    while_instr -> WHILE ( error ) instruction
Rule 37    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 38    return_instr -> RETURN expression ;
Rule 39    continue_instr -> CONTINUE ;
Rule 40    break_instr -> BREAK ;
Rule 41    compound_instr -> { declarations instructions }
Rule 42    condition -> expression
Rule 43    const -> integer
Rule 44    const -> float
Rule 45    const -> string
Rule 46    integer -> INTEGER
Rule 47    float -> FLOAT
Rule 48    string -> STRING
Rule 49    id -> ID
Rule 50    expression -> const
Rule 51    expression -> access
Rule 52    expression -> expression + expression
Rule 53    expression -> expression - expression
Rule 54    expression -> expression * expression
Rule 55    expression -> expression / expression
Rule 56    expression -> expression % expression
Rule 57    expression -> expression | expression
Rule 58    expression -> expression & expression
Rule 59    expression -> expression ^ expression
Rule 60    expression -> expression AND expression
Rule 61    expression -> expression OR expression
Rule 62    expression -> expression SHL expression
Rule 63    expression -> expression SHR expression
Rule 64    expression -> expression EQ expression
Rule 65    expression -> expression NEQ expression
Rule 66    expression -> expression > expression
Rule 67    expression -> expression < expression
Rule 68    expression -> expression LE expression
Rule 69    expression -> expression GE expression
Rule 70    expression -> ( expression )
Rule 71    expression -> ( error )
Rule 72    expression -> access ( expr_list_or_empty )
Rule 73    expression -> access ( error )
Rule 74    expr_list_or_empty -> expr_list
Rule 75    expr_list_or_empty -> <empty>
Rule 76    expr_list -> expr_list , expression
Rule 77    expr_list -> expression
Rule 78    fundefs -> fundef fundefs
Rule 79    fundefs -> <empty>
Rule 80    fundef -> TYPE id ( args_list_or_empty ) compound_instr
Rule 81    fundef -> id id ( args_list_or_empty ) compound_instr
Rule 82    args_list_or_empty -> args_list
Rule 83    args_list_or_empty -> <empty>
Rule 84    args_list -> args_list , arg
Rule 85    args_list -> arg
Rule 86    arg -> TYPE id
Rule 87    arg -> id id
Rule 88    classdefs -> classdef classdefs
Rule 89    classdefs -> <empty>
Rule 90    classdef -> accessmodificator CLASS id classcontent
Rule 91    classdef -> accessmodificator CLASS id EXTENDS id classcontent
Rule 92    classcontent -> { fielddefs ; methoddefs }
Rule 93    fielddefs -> fielddef fielddefs
Rule 94    fielddefs -> <empty>
Rule 95    fielddef -> accessmodificator declaration
Rule 96    methoddefs -> methoddef methoddefs
Rule 97    methoddefs -> <empty>
Rule 98    methoddef -> accessmodificator fundef
Rule 99    accessmodificator -> PRIVATE
Rule 100   accessmodificator -> PROTECTED
Rule 101   accessmodificator -> PUBLIC

Terminals, with rules where they appear

%                    : 56
&                    : 58
(                    : 31 32 33 34 35 36 70 71 72 73 80 81
)                    : 31 32 33 34 35 36 70 71 72 73 80 81
*                    : 54
+                    : 52
,                    : 7 10 76 84
-                    : 53
.                    : 30
/                    : 55
:                    : 27
;                    : 4 5 6 25 26 28 37 38 39 40 92
<                    : 67
=                    : 9 28
>                    : 66
AND                  : 60
BREAK                : 40
CLASS                : 90 91
CONTINUE             : 39
ELSE                 : 32 34
EQ                   : 64
EXTENDS              : 91
FLOAT                : 47
GE                   : 69
ID                   : 49
IF                   : 31 32 33 34
INTEGER              : 46
LE                   : 68
NEQ                  : 65
OR                   : 61
PRINT                : 25 26
PRIVATE              : 99
PROTECTED            : 100
PUBLIC               : 101
REPEAT               : 37
RETURN               : 38
SHL                  : 62
SHR                  : 63
STRING               : 48
TYPE                 : 4 80 86
UNTIL                : 37
WHILE                : 35 36
^                    : 59
error                : 6 26 33 34 36 71 73
{                    : 41 92
|                    : 57
}                    : 41 92

Nonterminals, with rules where they appear

access               : 28 51 72 73
accessmodificator    : 90 91 95 98
arg                  : 84 85
args_list            : 82 84
args_list_or_empty   : 80 81
assignment           : 17
break_instr          : 22
choice_instr         : 18
classcontent         : 90 91
classdef             : 88
classdefs            : 1 88
classinit            : 10 11
classinits           : 5 10
compound_instr       : 24 80 81
condition            : 31 32 35 37
const                : 50
continue_instr       : 23
declaration          : 2 95
declarations         : 1 2 41
expr_list            : 74 76
expr_list_or_empty   : 72
expression           : 9 25 28 38 42 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 76 77
fielddef             : 93
fielddefs            : 92 93
float                : 44
fundef               : 78 98
fundefs              : 1 78
id                   : 5 9 12 27 29 30 30 80 81 81 86 87 87 90 91 91
init                 : 7 8
inits                : 4 7
instruction          : 13 14 27 31 32 32 33 34 34 35 36
instructions         : 1 13 37 41
integer              : 43
labeled_instr        : 16
methoddef            : 96
methoddefs           : 92 96
print_instr          : 15
program              : 0
repeat_instr         : 20
return_instr         : 21
string               : 45
while_instr          : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . classdefs declarations fundefs instructions
    (88) classdefs -> . classdef classdefs
    (89) classdefs -> .
    (90) classdef -> . accessmodificator CLASS id classcontent
    (91) classdef -> . accessmodificator CLASS id EXTENDS id classcontent
    (99) accessmodificator -> . PRIVATE
    (100) accessmodificator -> . PROTECTED
    (101) accessmodificator -> . PUBLIC

    TYPE            reduce using rule 89 (classdefs -> .)
    error           reduce using rule 89 (classdefs -> .)
    ID              reduce using rule 89 (classdefs -> .)
    PRINT           reduce using rule 89 (classdefs -> .)
    IF              reduce using rule 89 (classdefs -> .)
    WHILE           reduce using rule 89 (classdefs -> .)
    REPEAT          reduce using rule 89 (classdefs -> .)
    RETURN          reduce using rule 89 (classdefs -> .)
    BREAK           reduce using rule 89 (classdefs -> .)
    CONTINUE        reduce using rule 89 (classdefs -> .)
    {               reduce using rule 89 (classdefs -> .)
    PRIVATE         shift and go to state 3
    PROTECTED       shift and go to state 4
    PUBLIC          shift and go to state 7

    accessmodificator              shift and go to state 1
    classdef                       shift and go to state 2
    program                        shift and go to state 5
    classdefs                      shift and go to state 6

state 1

    (90) classdef -> accessmodificator . CLASS id classcontent
    (91) classdef -> accessmodificator . CLASS id EXTENDS id classcontent

    CLASS           shift and go to state 8


state 2

    (88) classdefs -> classdef . classdefs
    (88) classdefs -> . classdef classdefs
    (89) classdefs -> .
    (90) classdef -> . accessmodificator CLASS id classcontent
    (91) classdef -> . accessmodificator CLASS id EXTENDS id classcontent
    (99) accessmodificator -> . PRIVATE
    (100) accessmodificator -> . PROTECTED
    (101) accessmodificator -> . PUBLIC

    TYPE            reduce using rule 89 (classdefs -> .)
    error           reduce using rule 89 (classdefs -> .)
    ID              reduce using rule 89 (classdefs -> .)
    PRINT           reduce using rule 89 (classdefs -> .)
    IF              reduce using rule 89 (classdefs -> .)
    WHILE           reduce using rule 89 (classdefs -> .)
    REPEAT          reduce using rule 89 (classdefs -> .)
    RETURN          reduce using rule 89 (classdefs -> .)
    BREAK           reduce using rule 89 (classdefs -> .)
    CONTINUE        reduce using rule 89 (classdefs -> .)
    {               reduce using rule 89 (classdefs -> .)
    PRIVATE         shift and go to state 3
    PROTECTED       shift and go to state 4
    PUBLIC          shift and go to state 7

    accessmodificator              shift and go to state 1
    classdef                       shift and go to state 2
    classdefs                      shift and go to state 9

state 3

    (99) accessmodificator -> PRIVATE .

    CLASS           reduce using rule 99 (accessmodificator -> PRIVATE .)
    TYPE            reduce using rule 99 (accessmodificator -> PRIVATE .)
    ID              reduce using rule 99 (accessmodificator -> PRIVATE .)
    error           reduce using rule 99 (accessmodificator -> PRIVATE .)


state 4

    (100) accessmodificator -> PROTECTED .

    CLASS           reduce using rule 100 (accessmodificator -> PROTECTED .)
    TYPE            reduce using rule 100 (accessmodificator -> PROTECTED .)
    ID              reduce using rule 100 (accessmodificator -> PROTECTED .)
    error           reduce using rule 100 (accessmodificator -> PROTECTED .)


state 5

    (0) S' -> program .



state 6

    (1) program -> classdefs . declarations fundefs instructions
    (2) declarations -> . declarations declaration
    (3) declarations -> .

    TYPE            reduce using rule 3 (declarations -> .)
    error           reduce using rule 3 (declarations -> .)
    ID              reduce using rule 3 (declarations -> .)
    PRINT           reduce using rule 3 (declarations -> .)
    IF              reduce using rule 3 (declarations -> .)
    WHILE           reduce using rule 3 (declarations -> .)
    REPEAT          reduce using rule 3 (declarations -> .)
    RETURN          reduce using rule 3 (declarations -> .)
    BREAK           reduce using rule 3 (declarations -> .)
    CONTINUE        reduce using rule 3 (declarations -> .)
    {               reduce using rule 3 (declarations -> .)

    declarations                   shift and go to state 10

state 7

    (101) accessmodificator -> PUBLIC .

    CLASS           reduce using rule 101 (accessmodificator -> PUBLIC .)
    TYPE            reduce using rule 101 (accessmodificator -> PUBLIC .)
    ID              reduce using rule 101 (accessmodificator -> PUBLIC .)
    error           reduce using rule 101 (accessmodificator -> PUBLIC .)


state 8

    (90) classdef -> accessmodificator CLASS . id classcontent
    (91) classdef -> accessmodificator CLASS . id EXTENDS id classcontent
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 12

state 9

    (88) classdefs -> classdef classdefs .

    TYPE            reduce using rule 88 (classdefs -> classdef classdefs .)
    error           reduce using rule 88 (classdefs -> classdef classdefs .)
    ID              reduce using rule 88 (classdefs -> classdef classdefs .)
    PRINT           reduce using rule 88 (classdefs -> classdef classdefs .)
    IF              reduce using rule 88 (classdefs -> classdef classdefs .)
    WHILE           reduce using rule 88 (classdefs -> classdef classdefs .)
    REPEAT          reduce using rule 88 (classdefs -> classdef classdefs .)
    RETURN          reduce using rule 88 (classdefs -> classdef classdefs .)
    BREAK           reduce using rule 88 (classdefs -> classdef classdefs .)
    CONTINUE        reduce using rule 88 (classdefs -> classdef classdefs .)
    {               reduce using rule 88 (classdefs -> classdef classdefs .)


state 10

    (1) program -> classdefs declarations . fundefs instructions
    (2) declarations -> declarations . declaration
    (78) fundefs -> . fundef fundefs
    (79) fundefs -> .
    (4) declaration -> . TYPE inits ;
    (5) declaration -> . id classinits ;
    (6) declaration -> . error ;
    (80) fundef -> . TYPE id ( args_list_or_empty ) compound_instr
    (81) fundef -> . id id ( args_list_or_empty ) compound_instr
    (49) id -> . ID

  ! shift/reduce conflict for ID resolved as shift
    PRINT           reduce using rule 79 (fundefs -> .)
    IF              reduce using rule 79 (fundefs -> .)
    WHILE           reduce using rule 79 (fundefs -> .)
    REPEAT          reduce using rule 79 (fundefs -> .)
    RETURN          reduce using rule 79 (fundefs -> .)
    BREAK           reduce using rule 79 (fundefs -> .)
    CONTINUE        reduce using rule 79 (fundefs -> .)
    {               reduce using rule 79 (fundefs -> .)
    TYPE            shift and go to state 17
    error           shift and go to state 15
    ID              shift and go to state 11

  ! ID              [ reduce using rule 79 (fundefs -> .) ]

    fundefs                        shift and go to state 13
    fundef                         shift and go to state 14
    declaration                    shift and go to state 16
    id                             shift and go to state 18

state 11

    (49) id -> ID .

    ID              reduce using rule 49 (id -> ID .)
    :               reduce using rule 49 (id -> ID .)
    .               reduce using rule 49 (id -> ID .)
    =               reduce using rule 49 (id -> ID .)
    (               reduce using rule 49 (id -> ID .)
    +               reduce using rule 49 (id -> ID .)
    -               reduce using rule 49 (id -> ID .)
    *               reduce using rule 49 (id -> ID .)
    /               reduce using rule 49 (id -> ID .)
    %               reduce using rule 49 (id -> ID .)
    |               reduce using rule 49 (id -> ID .)
    &               reduce using rule 49 (id -> ID .)
    ^               reduce using rule 49 (id -> ID .)
    AND             reduce using rule 49 (id -> ID .)
    OR              reduce using rule 49 (id -> ID .)
    SHL             reduce using rule 49 (id -> ID .)
    SHR             reduce using rule 49 (id -> ID .)
    EQ              reduce using rule 49 (id -> ID .)
    NEQ             reduce using rule 49 (id -> ID .)
    >               reduce using rule 49 (id -> ID .)
    <               reduce using rule 49 (id -> ID .)
    LE              reduce using rule 49 (id -> ID .)
    GE              reduce using rule 49 (id -> ID .)
    ;               reduce using rule 49 (id -> ID .)
    )               reduce using rule 49 (id -> ID .)
    ,               reduce using rule 49 (id -> ID .)
    EXTENDS         reduce using rule 49 (id -> ID .)
    {               reduce using rule 49 (id -> ID .)


state 12

    (90) classdef -> accessmodificator CLASS id . classcontent
    (91) classdef -> accessmodificator CLASS id . EXTENDS id classcontent
    (92) classcontent -> . { fielddefs ; methoddefs }

    EXTENDS         shift and go to state 20
    {               shift and go to state 21

    classcontent                   shift and go to state 19

state 13

    (1) program -> classdefs declarations fundefs . instructions
    (13) instructions -> . instructions instruction
    (14) instructions -> . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 22
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28
    instructions                   shift and go to state 37

state 14

    (78) fundefs -> fundef . fundefs
    (78) fundefs -> . fundef fundefs
    (79) fundefs -> .
    (80) fundef -> . TYPE id ( args_list_or_empty ) compound_instr
    (81) fundef -> . id id ( args_list_or_empty ) compound_instr
    (49) id -> . ID

  ! shift/reduce conflict for ID resolved as shift
    PRINT           reduce using rule 79 (fundefs -> .)
    IF              reduce using rule 79 (fundefs -> .)
    WHILE           reduce using rule 79 (fundefs -> .)
    REPEAT          reduce using rule 79 (fundefs -> .)
    RETURN          reduce using rule 79 (fundefs -> .)
    BREAK           reduce using rule 79 (fundefs -> .)
    CONTINUE        reduce using rule 79 (fundefs -> .)
    {               reduce using rule 79 (fundefs -> .)
    TYPE            shift and go to state 45
    ID              shift and go to state 11

  ! ID              [ reduce using rule 79 (fundefs -> .) ]

    fundefs                        shift and go to state 44
    id                             shift and go to state 46
    fundef                         shift and go to state 14

state 15

    (6) declaration -> error . ;

    ;               shift and go to state 47


state 16

    (2) declarations -> declarations declaration .

    TYPE            reduce using rule 2 (declarations -> declarations declaration .)
    error           reduce using rule 2 (declarations -> declarations declaration .)
    ID              reduce using rule 2 (declarations -> declarations declaration .)
    PRINT           reduce using rule 2 (declarations -> declarations declaration .)
    IF              reduce using rule 2 (declarations -> declarations declaration .)
    WHILE           reduce using rule 2 (declarations -> declarations declaration .)
    REPEAT          reduce using rule 2 (declarations -> declarations declaration .)
    RETURN          reduce using rule 2 (declarations -> declarations declaration .)
    BREAK           reduce using rule 2 (declarations -> declarations declaration .)
    CONTINUE        reduce using rule 2 (declarations -> declarations declaration .)
    {               reduce using rule 2 (declarations -> declarations declaration .)


state 17

    (4) declaration -> TYPE . inits ;
    (80) fundef -> TYPE . id ( args_list_or_empty ) compound_instr
    (7) inits -> . inits , init
    (8) inits -> . init
    (49) id -> . ID
    (9) init -> . id = expression

    ID              shift and go to state 11

    init                           shift and go to state 48
    inits                          shift and go to state 49
    id                             shift and go to state 50

state 18

    (5) declaration -> id . classinits ;
    (81) fundef -> id . id ( args_list_or_empty ) compound_instr
    (10) classinits -> . classinits , classinit
    (11) classinits -> . classinit
    (49) id -> . ID
    (12) classinit -> . id

    ID              shift and go to state 11

    classinits                     shift and go to state 51
    id                             shift and go to state 53
    classinit                      shift and go to state 52

state 19

    (90) classdef -> accessmodificator CLASS id classcontent .

    PRIVATE         reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    PROTECTED       reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    PUBLIC          reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    TYPE            reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    error           reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    ID              reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    PRINT           reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    IF              reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    WHILE           reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    REPEAT          reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    RETURN          reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    BREAK           reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    CONTINUE        reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)
    {               reduce using rule 90 (classdef -> accessmodificator CLASS id classcontent .)


state 20

    (91) classdef -> accessmodificator CLASS id EXTENDS . id classcontent
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 54

state 21

    (92) classcontent -> { . fielddefs ; methoddefs }
    (93) fielddefs -> . fielddef fielddefs
    (94) fielddefs -> .
    (95) fielddef -> . accessmodificator declaration
    (99) accessmodificator -> . PRIVATE
    (100) accessmodificator -> . PROTECTED
    (101) accessmodificator -> . PUBLIC

    ;               reduce using rule 94 (fielddefs -> .)
    PRIVATE         shift and go to state 3
    PROTECTED       shift and go to state 4
    PUBLIC          shift and go to state 7

    fielddefs                      shift and go to state 57
    accessmodificator              shift and go to state 56
    fielddef                       shift and go to state 55

state 22

    (14) instructions -> instruction .

    PRINT           reduce using rule 14 (instructions -> instruction .)
    IF              reduce using rule 14 (instructions -> instruction .)
    WHILE           reduce using rule 14 (instructions -> instruction .)
    REPEAT          reduce using rule 14 (instructions -> instruction .)
    RETURN          reduce using rule 14 (instructions -> instruction .)
    BREAK           reduce using rule 14 (instructions -> instruction .)
    CONTINUE        reduce using rule 14 (instructions -> instruction .)
    {               reduce using rule 14 (instructions -> instruction .)
    ID              reduce using rule 14 (instructions -> instruction .)
    $end            reduce using rule 14 (instructions -> instruction .)
    UNTIL           reduce using rule 14 (instructions -> instruction .)
    }               reduce using rule 14 (instructions -> instruction .)


state 23

    (38) return_instr -> RETURN . expression ;
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 68
    id                             shift and go to state 61

state 24

    (18) instruction -> choice_instr .

    }               reduce using rule 18 (instruction -> choice_instr .)
    PRINT           reduce using rule 18 (instruction -> choice_instr .)
    IF              reduce using rule 18 (instruction -> choice_instr .)
    WHILE           reduce using rule 18 (instruction -> choice_instr .)
    REPEAT          reduce using rule 18 (instruction -> choice_instr .)
    RETURN          reduce using rule 18 (instruction -> choice_instr .)
    BREAK           reduce using rule 18 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 18 (instruction -> choice_instr .)
    {               reduce using rule 18 (instruction -> choice_instr .)
    ID              reduce using rule 18 (instruction -> choice_instr .)
    UNTIL           reduce using rule 18 (instruction -> choice_instr .)
    $end            reduce using rule 18 (instruction -> choice_instr .)
    ELSE            reduce using rule 18 (instruction -> choice_instr .)


state 25

    (31) choice_instr -> IF . ( condition ) instruction
    (32) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (33) choice_instr -> IF . ( error ) instruction
    (34) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 69


state 26

    (25) print_instr -> PRINT . expression ;
    (26) print_instr -> PRINT . error ;
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    error           shift and go to state 70
    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 71
    id                             shift and go to state 61

state 27

    (27) labeled_instr -> id . : instruction
    (29) access -> id .
    (30) access -> id . . id

    :               shift and go to state 72
    =               reduce using rule 29 (access -> id .)
    .               shift and go to state 73


state 28

    (20) instruction -> repeat_instr .

    }               reduce using rule 20 (instruction -> repeat_instr .)
    PRINT           reduce using rule 20 (instruction -> repeat_instr .)
    IF              reduce using rule 20 (instruction -> repeat_instr .)
    WHILE           reduce using rule 20 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 20 (instruction -> repeat_instr .)
    RETURN          reduce using rule 20 (instruction -> repeat_instr .)
    BREAK           reduce using rule 20 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 20 (instruction -> repeat_instr .)
    {               reduce using rule 20 (instruction -> repeat_instr .)
    ID              reduce using rule 20 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 20 (instruction -> repeat_instr .)
    $end            reduce using rule 20 (instruction -> repeat_instr .)
    ELSE            reduce using rule 20 (instruction -> repeat_instr .)


state 29

    (21) instruction -> return_instr .

    }               reduce using rule 21 (instruction -> return_instr .)
    PRINT           reduce using rule 21 (instruction -> return_instr .)
    IF              reduce using rule 21 (instruction -> return_instr .)
    WHILE           reduce using rule 21 (instruction -> return_instr .)
    REPEAT          reduce using rule 21 (instruction -> return_instr .)
    RETURN          reduce using rule 21 (instruction -> return_instr .)
    BREAK           reduce using rule 21 (instruction -> return_instr .)
    CONTINUE        reduce using rule 21 (instruction -> return_instr .)
    {               reduce using rule 21 (instruction -> return_instr .)
    ID              reduce using rule 21 (instruction -> return_instr .)
    UNTIL           reduce using rule 21 (instruction -> return_instr .)
    $end            reduce using rule 21 (instruction -> return_instr .)
    ELSE            reduce using rule 21 (instruction -> return_instr .)


state 30

    (23) instruction -> continue_instr .

    }               reduce using rule 23 (instruction -> continue_instr .)
    PRINT           reduce using rule 23 (instruction -> continue_instr .)
    IF              reduce using rule 23 (instruction -> continue_instr .)
    WHILE           reduce using rule 23 (instruction -> continue_instr .)
    REPEAT          reduce using rule 23 (instruction -> continue_instr .)
    RETURN          reduce using rule 23 (instruction -> continue_instr .)
    BREAK           reduce using rule 23 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 23 (instruction -> continue_instr .)
    {               reduce using rule 23 (instruction -> continue_instr .)
    ID              reduce using rule 23 (instruction -> continue_instr .)
    UNTIL           reduce using rule 23 (instruction -> continue_instr .)
    $end            reduce using rule 23 (instruction -> continue_instr .)
    ELSE            reduce using rule 23 (instruction -> continue_instr .)


state 31

    (19) instruction -> while_instr .

    }               reduce using rule 19 (instruction -> while_instr .)
    PRINT           reduce using rule 19 (instruction -> while_instr .)
    IF              reduce using rule 19 (instruction -> while_instr .)
    WHILE           reduce using rule 19 (instruction -> while_instr .)
    REPEAT          reduce using rule 19 (instruction -> while_instr .)
    RETURN          reduce using rule 19 (instruction -> while_instr .)
    BREAK           reduce using rule 19 (instruction -> while_instr .)
    CONTINUE        reduce using rule 19 (instruction -> while_instr .)
    {               reduce using rule 19 (instruction -> while_instr .)
    ID              reduce using rule 19 (instruction -> while_instr .)
    UNTIL           reduce using rule 19 (instruction -> while_instr .)
    $end            reduce using rule 19 (instruction -> while_instr .)
    ELSE            reduce using rule 19 (instruction -> while_instr .)


state 32

    (28) assignment -> access . = expression ;

    =               shift and go to state 74


state 33

    (37) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (13) instructions -> . instructions instruction
    (14) instructions -> . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 22
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    repeat_instr                   shift and go to state 28
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27
    instructions                   shift and go to state 75

state 34

    (17) instruction -> assignment .

    }               reduce using rule 17 (instruction -> assignment .)
    PRINT           reduce using rule 17 (instruction -> assignment .)
    IF              reduce using rule 17 (instruction -> assignment .)
    WHILE           reduce using rule 17 (instruction -> assignment .)
    REPEAT          reduce using rule 17 (instruction -> assignment .)
    RETURN          reduce using rule 17 (instruction -> assignment .)
    BREAK           reduce using rule 17 (instruction -> assignment .)
    CONTINUE        reduce using rule 17 (instruction -> assignment .)
    {               reduce using rule 17 (instruction -> assignment .)
    ID              reduce using rule 17 (instruction -> assignment .)
    UNTIL           reduce using rule 17 (instruction -> assignment .)
    $end            reduce using rule 17 (instruction -> assignment .)
    ELSE            reduce using rule 17 (instruction -> assignment .)


state 35

    (16) instruction -> labeled_instr .

    }               reduce using rule 16 (instruction -> labeled_instr .)
    PRINT           reduce using rule 16 (instruction -> labeled_instr .)
    IF              reduce using rule 16 (instruction -> labeled_instr .)
    WHILE           reduce using rule 16 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 16 (instruction -> labeled_instr .)
    RETURN          reduce using rule 16 (instruction -> labeled_instr .)
    BREAK           reduce using rule 16 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 16 (instruction -> labeled_instr .)
    {               reduce using rule 16 (instruction -> labeled_instr .)
    ID              reduce using rule 16 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 16 (instruction -> labeled_instr .)
    $end            reduce using rule 16 (instruction -> labeled_instr .)
    ELSE            reduce using rule 16 (instruction -> labeled_instr .)


state 36

    (24) instruction -> compound_instr .

    }               reduce using rule 24 (instruction -> compound_instr .)
    PRINT           reduce using rule 24 (instruction -> compound_instr .)
    IF              reduce using rule 24 (instruction -> compound_instr .)
    WHILE           reduce using rule 24 (instruction -> compound_instr .)
    REPEAT          reduce using rule 24 (instruction -> compound_instr .)
    RETURN          reduce using rule 24 (instruction -> compound_instr .)
    BREAK           reduce using rule 24 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 24 (instruction -> compound_instr .)
    {               reduce using rule 24 (instruction -> compound_instr .)
    ID              reduce using rule 24 (instruction -> compound_instr .)
    UNTIL           reduce using rule 24 (instruction -> compound_instr .)
    $end            reduce using rule 24 (instruction -> compound_instr .)
    ELSE            reduce using rule 24 (instruction -> compound_instr .)


state 37

    (1) program -> classdefs declarations fundefs instructions .
    (13) instructions -> instructions . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    $end            reduce using rule 1 (program -> classdefs declarations fundefs instructions .)
    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 76
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28

state 38

    (22) instruction -> break_instr .

    }               reduce using rule 22 (instruction -> break_instr .)
    PRINT           reduce using rule 22 (instruction -> break_instr .)
    IF              reduce using rule 22 (instruction -> break_instr .)
    WHILE           reduce using rule 22 (instruction -> break_instr .)
    REPEAT          reduce using rule 22 (instruction -> break_instr .)
    RETURN          reduce using rule 22 (instruction -> break_instr .)
    BREAK           reduce using rule 22 (instruction -> break_instr .)
    CONTINUE        reduce using rule 22 (instruction -> break_instr .)
    {               reduce using rule 22 (instruction -> break_instr .)
    ID              reduce using rule 22 (instruction -> break_instr .)
    UNTIL           reduce using rule 22 (instruction -> break_instr .)
    $end            reduce using rule 22 (instruction -> break_instr .)
    ELSE            reduce using rule 22 (instruction -> break_instr .)


state 39

    (35) while_instr -> WHILE . ( condition ) instruction
    (36) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 77


state 40

    (40) break_instr -> BREAK . ;

    ;               shift and go to state 78


state 41

    (15) instruction -> print_instr .

    }               reduce using rule 15 (instruction -> print_instr .)
    PRINT           reduce using rule 15 (instruction -> print_instr .)
    IF              reduce using rule 15 (instruction -> print_instr .)
    WHILE           reduce using rule 15 (instruction -> print_instr .)
    REPEAT          reduce using rule 15 (instruction -> print_instr .)
    RETURN          reduce using rule 15 (instruction -> print_instr .)
    BREAK           reduce using rule 15 (instruction -> print_instr .)
    CONTINUE        reduce using rule 15 (instruction -> print_instr .)
    {               reduce using rule 15 (instruction -> print_instr .)
    ID              reduce using rule 15 (instruction -> print_instr .)
    UNTIL           reduce using rule 15 (instruction -> print_instr .)
    $end            reduce using rule 15 (instruction -> print_instr .)
    ELSE            reduce using rule 15 (instruction -> print_instr .)


state 42

    (39) continue_instr -> CONTINUE . ;

    ;               shift and go to state 79


state 43

    (41) compound_instr -> { . declarations instructions }
    (2) declarations -> . declarations declaration
    (3) declarations -> .

    TYPE            reduce using rule 3 (declarations -> .)
    error           reduce using rule 3 (declarations -> .)
    ID              reduce using rule 3 (declarations -> .)
    PRINT           reduce using rule 3 (declarations -> .)
    IF              reduce using rule 3 (declarations -> .)
    WHILE           reduce using rule 3 (declarations -> .)
    REPEAT          reduce using rule 3 (declarations -> .)
    RETURN          reduce using rule 3 (declarations -> .)
    BREAK           reduce using rule 3 (declarations -> .)
    CONTINUE        reduce using rule 3 (declarations -> .)
    {               reduce using rule 3 (declarations -> .)

    declarations                   shift and go to state 80

state 44

    (78) fundefs -> fundef fundefs .

    PRINT           reduce using rule 78 (fundefs -> fundef fundefs .)
    IF              reduce using rule 78 (fundefs -> fundef fundefs .)
    WHILE           reduce using rule 78 (fundefs -> fundef fundefs .)
    REPEAT          reduce using rule 78 (fundefs -> fundef fundefs .)
    RETURN          reduce using rule 78 (fundefs -> fundef fundefs .)
    BREAK           reduce using rule 78 (fundefs -> fundef fundefs .)
    CONTINUE        reduce using rule 78 (fundefs -> fundef fundefs .)
    {               reduce using rule 78 (fundefs -> fundef fundefs .)
    ID              reduce using rule 78 (fundefs -> fundef fundefs .)


state 45

    (80) fundef -> TYPE . id ( args_list_or_empty ) compound_instr
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 81

state 46

    (81) fundef -> id . id ( args_list_or_empty ) compound_instr
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 82

state 47

    (6) declaration -> error ; .

    PRIVATE         reduce using rule 6 (declaration -> error ; .)
    PROTECTED       reduce using rule 6 (declaration -> error ; .)
    PUBLIC          reduce using rule 6 (declaration -> error ; .)
    ;               reduce using rule 6 (declaration -> error ; .)
    TYPE            reduce using rule 6 (declaration -> error ; .)
    error           reduce using rule 6 (declaration -> error ; .)
    ID              reduce using rule 6 (declaration -> error ; .)
    PRINT           reduce using rule 6 (declaration -> error ; .)
    IF              reduce using rule 6 (declaration -> error ; .)
    WHILE           reduce using rule 6 (declaration -> error ; .)
    REPEAT          reduce using rule 6 (declaration -> error ; .)
    RETURN          reduce using rule 6 (declaration -> error ; .)
    BREAK           reduce using rule 6 (declaration -> error ; .)
    CONTINUE        reduce using rule 6 (declaration -> error ; .)
    {               reduce using rule 6 (declaration -> error ; .)


state 48

    (8) inits -> init .

    ;               reduce using rule 8 (inits -> init .)
    ,               reduce using rule 8 (inits -> init .)


state 49

    (4) declaration -> TYPE inits . ;
    (7) inits -> inits . , init

    ;               shift and go to state 83
    ,               shift and go to state 84


state 50

    (80) fundef -> TYPE id . ( args_list_or_empty ) compound_instr
    (9) init -> id . = expression

    (               shift and go to state 85
    =               shift and go to state 86


state 51

    (5) declaration -> id classinits . ;
    (10) classinits -> classinits . , classinit

    ;               shift and go to state 87
    ,               shift and go to state 88


state 52

    (11) classinits -> classinit .

    ;               reduce using rule 11 (classinits -> classinit .)
    ,               reduce using rule 11 (classinits -> classinit .)


state 53

    (81) fundef -> id id . ( args_list_or_empty ) compound_instr
    (12) classinit -> id .

    (               shift and go to state 89
    ;               reduce using rule 12 (classinit -> id .)
    ,               reduce using rule 12 (classinit -> id .)


state 54

    (91) classdef -> accessmodificator CLASS id EXTENDS id . classcontent
    (92) classcontent -> . { fielddefs ; methoddefs }

    {               shift and go to state 21

    classcontent                   shift and go to state 90

state 55

    (93) fielddefs -> fielddef . fielddefs
    (93) fielddefs -> . fielddef fielddefs
    (94) fielddefs -> .
    (95) fielddef -> . accessmodificator declaration
    (99) accessmodificator -> . PRIVATE
    (100) accessmodificator -> . PROTECTED
    (101) accessmodificator -> . PUBLIC

    ;               reduce using rule 94 (fielddefs -> .)
    PRIVATE         shift and go to state 3
    PROTECTED       shift and go to state 4
    PUBLIC          shift and go to state 7

    fielddef                       shift and go to state 55
    accessmodificator              shift and go to state 56
    fielddefs                      shift and go to state 91

state 56

    (95) fielddef -> accessmodificator . declaration
    (4) declaration -> . TYPE inits ;
    (5) declaration -> . id classinits ;
    (6) declaration -> . error ;
    (49) id -> . ID

    TYPE            shift and go to state 93
    error           shift and go to state 15
    ID              shift and go to state 11

    id                             shift and go to state 94
    declaration                    shift and go to state 92

state 57

    (92) classcontent -> { fielddefs . ; methoddefs }

    ;               shift and go to state 95


state 58

    (44) const -> float .

    )               reduce using rule 44 (const -> float .)
    +               reduce using rule 44 (const -> float .)
    -               reduce using rule 44 (const -> float .)
    *               reduce using rule 44 (const -> float .)
    /               reduce using rule 44 (const -> float .)
    %               reduce using rule 44 (const -> float .)
    |               reduce using rule 44 (const -> float .)
    &               reduce using rule 44 (const -> float .)
    ^               reduce using rule 44 (const -> float .)
    AND             reduce using rule 44 (const -> float .)
    OR              reduce using rule 44 (const -> float .)
    SHL             reduce using rule 44 (const -> float .)
    SHR             reduce using rule 44 (const -> float .)
    EQ              reduce using rule 44 (const -> float .)
    NEQ             reduce using rule 44 (const -> float .)
    >               reduce using rule 44 (const -> float .)
    <               reduce using rule 44 (const -> float .)
    LE              reduce using rule 44 (const -> float .)
    GE              reduce using rule 44 (const -> float .)
    ;               reduce using rule 44 (const -> float .)
    ,               reduce using rule 44 (const -> float .)


state 59

    (48) string -> STRING .

    +               reduce using rule 48 (string -> STRING .)
    -               reduce using rule 48 (string -> STRING .)
    *               reduce using rule 48 (string -> STRING .)
    /               reduce using rule 48 (string -> STRING .)
    %               reduce using rule 48 (string -> STRING .)
    |               reduce using rule 48 (string -> STRING .)
    &               reduce using rule 48 (string -> STRING .)
    ^               reduce using rule 48 (string -> STRING .)
    AND             reduce using rule 48 (string -> STRING .)
    OR              reduce using rule 48 (string -> STRING .)
    SHL             reduce using rule 48 (string -> STRING .)
    SHR             reduce using rule 48 (string -> STRING .)
    EQ              reduce using rule 48 (string -> STRING .)
    NEQ             reduce using rule 48 (string -> STRING .)
    >               reduce using rule 48 (string -> STRING .)
    <               reduce using rule 48 (string -> STRING .)
    LE              reduce using rule 48 (string -> STRING .)
    GE              reduce using rule 48 (string -> STRING .)
    ;               reduce using rule 48 (string -> STRING .)
    )               reduce using rule 48 (string -> STRING .)
    ,               reduce using rule 48 (string -> STRING .)


state 60

    (43) const -> integer .

    )               reduce using rule 43 (const -> integer .)
    +               reduce using rule 43 (const -> integer .)
    -               reduce using rule 43 (const -> integer .)
    *               reduce using rule 43 (const -> integer .)
    /               reduce using rule 43 (const -> integer .)
    %               reduce using rule 43 (const -> integer .)
    |               reduce using rule 43 (const -> integer .)
    &               reduce using rule 43 (const -> integer .)
    ^               reduce using rule 43 (const -> integer .)
    AND             reduce using rule 43 (const -> integer .)
    OR              reduce using rule 43 (const -> integer .)
    SHL             reduce using rule 43 (const -> integer .)
    SHR             reduce using rule 43 (const -> integer .)
    EQ              reduce using rule 43 (const -> integer .)
    NEQ             reduce using rule 43 (const -> integer .)
    >               reduce using rule 43 (const -> integer .)
    <               reduce using rule 43 (const -> integer .)
    LE              reduce using rule 43 (const -> integer .)
    GE              reduce using rule 43 (const -> integer .)
    ;               reduce using rule 43 (const -> integer .)
    ,               reduce using rule 43 (const -> integer .)


state 61

    (29) access -> id .
    (30) access -> id . . id

    (               reduce using rule 29 (access -> id .)
    +               reduce using rule 29 (access -> id .)
    -               reduce using rule 29 (access -> id .)
    *               reduce using rule 29 (access -> id .)
    /               reduce using rule 29 (access -> id .)
    %               reduce using rule 29 (access -> id .)
    |               reduce using rule 29 (access -> id .)
    &               reduce using rule 29 (access -> id .)
    ^               reduce using rule 29 (access -> id .)
    AND             reduce using rule 29 (access -> id .)
    OR              reduce using rule 29 (access -> id .)
    SHL             reduce using rule 29 (access -> id .)
    SHR             reduce using rule 29 (access -> id .)
    EQ              reduce using rule 29 (access -> id .)
    NEQ             reduce using rule 29 (access -> id .)
    >               reduce using rule 29 (access -> id .)
    <               reduce using rule 29 (access -> id .)
    LE              reduce using rule 29 (access -> id .)
    GE              reduce using rule 29 (access -> id .)
    ;               reduce using rule 29 (access -> id .)
    )               reduce using rule 29 (access -> id .)
    ,               reduce using rule 29 (access -> id .)
    .               shift and go to state 73


state 62

    (50) expression -> const .

    +               reduce using rule 50 (expression -> const .)
    -               reduce using rule 50 (expression -> const .)
    *               reduce using rule 50 (expression -> const .)
    /               reduce using rule 50 (expression -> const .)
    %               reduce using rule 50 (expression -> const .)
    |               reduce using rule 50 (expression -> const .)
    &               reduce using rule 50 (expression -> const .)
    ^               reduce using rule 50 (expression -> const .)
    AND             reduce using rule 50 (expression -> const .)
    OR              reduce using rule 50 (expression -> const .)
    SHL             reduce using rule 50 (expression -> const .)
    SHR             reduce using rule 50 (expression -> const .)
    EQ              reduce using rule 50 (expression -> const .)
    NEQ             reduce using rule 50 (expression -> const .)
    >               reduce using rule 50 (expression -> const .)
    <               reduce using rule 50 (expression -> const .)
    LE              reduce using rule 50 (expression -> const .)
    GE              reduce using rule 50 (expression -> const .)
    ,               reduce using rule 50 (expression -> const .)
    )               reduce using rule 50 (expression -> const .)
    ;               reduce using rule 50 (expression -> const .)


state 63

    (51) expression -> access .
    (72) expression -> access . ( expr_list_or_empty )
    (73) expression -> access . ( error )

    +               reduce using rule 51 (expression -> access .)
    -               reduce using rule 51 (expression -> access .)
    *               reduce using rule 51 (expression -> access .)
    /               reduce using rule 51 (expression -> access .)
    %               reduce using rule 51 (expression -> access .)
    |               reduce using rule 51 (expression -> access .)
    &               reduce using rule 51 (expression -> access .)
    ^               reduce using rule 51 (expression -> access .)
    AND             reduce using rule 51 (expression -> access .)
    OR              reduce using rule 51 (expression -> access .)
    SHL             reduce using rule 51 (expression -> access .)
    SHR             reduce using rule 51 (expression -> access .)
    EQ              reduce using rule 51 (expression -> access .)
    NEQ             reduce using rule 51 (expression -> access .)
    >               reduce using rule 51 (expression -> access .)
    <               reduce using rule 51 (expression -> access .)
    LE              reduce using rule 51 (expression -> access .)
    GE              reduce using rule 51 (expression -> access .)
    ,               reduce using rule 51 (expression -> access .)
    )               reduce using rule 51 (expression -> access .)
    ;               reduce using rule 51 (expression -> access .)
    (               shift and go to state 96


state 64

    (46) integer -> INTEGER .

    +               reduce using rule 46 (integer -> INTEGER .)
    -               reduce using rule 46 (integer -> INTEGER .)
    *               reduce using rule 46 (integer -> INTEGER .)
    /               reduce using rule 46 (integer -> INTEGER .)
    %               reduce using rule 46 (integer -> INTEGER .)
    |               reduce using rule 46 (integer -> INTEGER .)
    &               reduce using rule 46 (integer -> INTEGER .)
    ^               reduce using rule 46 (integer -> INTEGER .)
    AND             reduce using rule 46 (integer -> INTEGER .)
    OR              reduce using rule 46 (integer -> INTEGER .)
    SHL             reduce using rule 46 (integer -> INTEGER .)
    SHR             reduce using rule 46 (integer -> INTEGER .)
    EQ              reduce using rule 46 (integer -> INTEGER .)
    NEQ             reduce using rule 46 (integer -> INTEGER .)
    >               reduce using rule 46 (integer -> INTEGER .)
    <               reduce using rule 46 (integer -> INTEGER .)
    LE              reduce using rule 46 (integer -> INTEGER .)
    GE              reduce using rule 46 (integer -> INTEGER .)
    ;               reduce using rule 46 (integer -> INTEGER .)
    )               reduce using rule 46 (integer -> INTEGER .)
    ,               reduce using rule 46 (integer -> INTEGER .)


state 65

    (45) const -> string .

    )               reduce using rule 45 (const -> string .)
    +               reduce using rule 45 (const -> string .)
    -               reduce using rule 45 (const -> string .)
    *               reduce using rule 45 (const -> string .)
    /               reduce using rule 45 (const -> string .)
    %               reduce using rule 45 (const -> string .)
    |               reduce using rule 45 (const -> string .)
    &               reduce using rule 45 (const -> string .)
    ^               reduce using rule 45 (const -> string .)
    AND             reduce using rule 45 (const -> string .)
    OR              reduce using rule 45 (const -> string .)
    SHL             reduce using rule 45 (const -> string .)
    SHR             reduce using rule 45 (const -> string .)
    EQ              reduce using rule 45 (const -> string .)
    NEQ             reduce using rule 45 (const -> string .)
    >               reduce using rule 45 (const -> string .)
    <               reduce using rule 45 (const -> string .)
    LE              reduce using rule 45 (const -> string .)
    GE              reduce using rule 45 (const -> string .)
    ;               reduce using rule 45 (const -> string .)
    ,               reduce using rule 45 (const -> string .)


state 66

    (47) float -> FLOAT .

    +               reduce using rule 47 (float -> FLOAT .)
    -               reduce using rule 47 (float -> FLOAT .)
    *               reduce using rule 47 (float -> FLOAT .)
    /               reduce using rule 47 (float -> FLOAT .)
    %               reduce using rule 47 (float -> FLOAT .)
    |               reduce using rule 47 (float -> FLOAT .)
    &               reduce using rule 47 (float -> FLOAT .)
    ^               reduce using rule 47 (float -> FLOAT .)
    AND             reduce using rule 47 (float -> FLOAT .)
    OR              reduce using rule 47 (float -> FLOAT .)
    SHL             reduce using rule 47 (float -> FLOAT .)
    SHR             reduce using rule 47 (float -> FLOAT .)
    EQ              reduce using rule 47 (float -> FLOAT .)
    NEQ             reduce using rule 47 (float -> FLOAT .)
    >               reduce using rule 47 (float -> FLOAT .)
    <               reduce using rule 47 (float -> FLOAT .)
    LE              reduce using rule 47 (float -> FLOAT .)
    GE              reduce using rule 47 (float -> FLOAT .)
    ;               reduce using rule 47 (float -> FLOAT .)
    )               reduce using rule 47 (float -> FLOAT .)
    ,               reduce using rule 47 (float -> FLOAT .)


state 67

    (70) expression -> ( . expression )
    (71) expression -> ( . error )
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    error           shift and go to state 97
    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 98
    id                             shift and go to state 61

state 68

    (38) return_instr -> RETURN expression . ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               shift and go to state 114
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 69

    (31) choice_instr -> IF ( . condition ) instruction
    (32) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (33) choice_instr -> IF ( . error ) instruction
    (34) choice_instr -> IF ( . error ) instruction ELSE instruction
    (42) condition -> . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    error           shift and go to state 119
    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    float                          shift and go to state 58
    const                          shift and go to state 62
    string                         shift and go to state 65
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 120
    id                             shift and go to state 61
    condition                      shift and go to state 118

state 70

    (26) print_instr -> PRINT error . ;

    ;               shift and go to state 121


state 71

    (25) print_instr -> PRINT expression . ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               shift and go to state 122
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 72

    (27) labeled_instr -> id : . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 123
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28

state 73

    (30) access -> id . . id
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 124

state 74

    (28) assignment -> access = . expression ;
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 125
    id                             shift and go to state 61

state 75

    (37) repeat_instr -> REPEAT instructions . UNTIL condition ;
    (13) instructions -> instructions . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    UNTIL           shift and go to state 126
    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 76
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    repeat_instr                   shift and go to state 28
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27

state 76

    (13) instructions -> instructions instruction .

    PRINT           reduce using rule 13 (instructions -> instructions instruction .)
    IF              reduce using rule 13 (instructions -> instructions instruction .)
    WHILE           reduce using rule 13 (instructions -> instructions instruction .)
    REPEAT          reduce using rule 13 (instructions -> instructions instruction .)
    RETURN          reduce using rule 13 (instructions -> instructions instruction .)
    BREAK           reduce using rule 13 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 13 (instructions -> instructions instruction .)
    {               reduce using rule 13 (instructions -> instructions instruction .)
    ID              reduce using rule 13 (instructions -> instructions instruction .)
    $end            reduce using rule 13 (instructions -> instructions instruction .)
    UNTIL           reduce using rule 13 (instructions -> instructions instruction .)
    }               reduce using rule 13 (instructions -> instructions instruction .)


state 77

    (35) while_instr -> WHILE ( . condition ) instruction
    (36) while_instr -> WHILE ( . error ) instruction
    (42) condition -> . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    error           shift and go to state 128
    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    float                          shift and go to state 58
    const                          shift and go to state 62
    string                         shift and go to state 65
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 120
    id                             shift and go to state 61
    condition                      shift and go to state 127

state 78

    (40) break_instr -> BREAK ; .

    PRINT           reduce using rule 40 (break_instr -> BREAK ; .)
    IF              reduce using rule 40 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 40 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 40 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 40 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 40 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 40 (break_instr -> BREAK ; .)
    {               reduce using rule 40 (break_instr -> BREAK ; .)
    ID              reduce using rule 40 (break_instr -> BREAK ; .)
    $end            reduce using rule 40 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 40 (break_instr -> BREAK ; .)
    }               reduce using rule 40 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 40 (break_instr -> BREAK ; .)


state 79

    (39) continue_instr -> CONTINUE ; .

    }               reduce using rule 39 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 39 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 39 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 39 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 39 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 39 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 39 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 39 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 39 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 39 (continue_instr -> CONTINUE ; .)


state 80

    (41) compound_instr -> { declarations . instructions }
    (2) declarations -> declarations . declaration
    (13) instructions -> . instructions instruction
    (14) instructions -> . instruction
    (4) declaration -> . TYPE inits ;
    (5) declaration -> . id classinits ;
    (6) declaration -> . error ;
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (49) id -> . ID
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (29) access -> . id
    (30) access -> . id . id

    TYPE            shift and go to state 93
    error           shift and go to state 15
    ID              shift and go to state 11
    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43

    return_instr                   shift and go to state 29
    break_instr                    shift and go to state 38
    instruction                    shift and go to state 22
    assignment                     shift and go to state 34
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    declaration                    shift and go to state 16
    while_instr                    shift and go to state 31
    id                             shift and go to state 129
    repeat_instr                   shift and go to state 28
    instructions                   shift and go to state 130

state 81

    (80) fundef -> TYPE id . ( args_list_or_empty ) compound_instr

    (               shift and go to state 85


state 82

    (81) fundef -> id id . ( args_list_or_empty ) compound_instr

    (               shift and go to state 89


state 83

    (4) declaration -> TYPE inits ; .

    PRIVATE         reduce using rule 4 (declaration -> TYPE inits ; .)
    PROTECTED       reduce using rule 4 (declaration -> TYPE inits ; .)
    PUBLIC          reduce using rule 4 (declaration -> TYPE inits ; .)
    ;               reduce using rule 4 (declaration -> TYPE inits ; .)
    TYPE            reduce using rule 4 (declaration -> TYPE inits ; .)
    error           reduce using rule 4 (declaration -> TYPE inits ; .)
    ID              reduce using rule 4 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 4 (declaration -> TYPE inits ; .)
    IF              reduce using rule 4 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 4 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 4 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 4 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 4 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 4 (declaration -> TYPE inits ; .)
    {               reduce using rule 4 (declaration -> TYPE inits ; .)


state 84

    (7) inits -> inits , . init
    (9) init -> . id = expression
    (49) id -> . ID

    ID              shift and go to state 11

    init                           shift and go to state 131
    id                             shift and go to state 132

state 85

    (80) fundef -> TYPE id ( . args_list_or_empty ) compound_instr
    (82) args_list_or_empty -> . args_list
    (83) args_list_or_empty -> .
    (84) args_list -> . args_list , arg
    (85) args_list -> . arg
    (86) arg -> . TYPE id
    (87) arg -> . id id
    (49) id -> . ID

    )               reduce using rule 83 (args_list_or_empty -> .)
    TYPE            shift and go to state 136
    ID              shift and go to state 11

    args_list_or_empty             shift and go to state 134
    arg                            shift and go to state 135
    id                             shift and go to state 137
    args_list                      shift and go to state 133

state 86

    (9) init -> id = . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 138
    id                             shift and go to state 61
    string                         shift and go to state 65

state 87

    (5) declaration -> id classinits ; .

    PRIVATE         reduce using rule 5 (declaration -> id classinits ; .)
    PROTECTED       reduce using rule 5 (declaration -> id classinits ; .)
    PUBLIC          reduce using rule 5 (declaration -> id classinits ; .)
    ;               reduce using rule 5 (declaration -> id classinits ; .)
    TYPE            reduce using rule 5 (declaration -> id classinits ; .)
    error           reduce using rule 5 (declaration -> id classinits ; .)
    ID              reduce using rule 5 (declaration -> id classinits ; .)
    PRINT           reduce using rule 5 (declaration -> id classinits ; .)
    IF              reduce using rule 5 (declaration -> id classinits ; .)
    WHILE           reduce using rule 5 (declaration -> id classinits ; .)
    REPEAT          reduce using rule 5 (declaration -> id classinits ; .)
    RETURN          reduce using rule 5 (declaration -> id classinits ; .)
    BREAK           reduce using rule 5 (declaration -> id classinits ; .)
    CONTINUE        reduce using rule 5 (declaration -> id classinits ; .)
    {               reduce using rule 5 (declaration -> id classinits ; .)


state 88

    (10) classinits -> classinits , . classinit
    (12) classinit -> . id
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 139
    classinit                      shift and go to state 140

state 89

    (81) fundef -> id id ( . args_list_or_empty ) compound_instr
    (82) args_list_or_empty -> . args_list
    (83) args_list_or_empty -> .
    (84) args_list -> . args_list , arg
    (85) args_list -> . arg
    (86) arg -> . TYPE id
    (87) arg -> . id id
    (49) id -> . ID

    )               reduce using rule 83 (args_list_or_empty -> .)
    TYPE            shift and go to state 136
    ID              shift and go to state 11

    args_list_or_empty             shift and go to state 141
    arg                            shift and go to state 135
    id                             shift and go to state 137
    args_list                      shift and go to state 133

state 90

    (91) classdef -> accessmodificator CLASS id EXTENDS id classcontent .

    PRIVATE         reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    PROTECTED       reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    PUBLIC          reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    TYPE            reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    error           reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    ID              reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    PRINT           reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    IF              reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    WHILE           reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    REPEAT          reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    RETURN          reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    BREAK           reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    CONTINUE        reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)
    {               reduce using rule 91 (classdef -> accessmodificator CLASS id EXTENDS id classcontent .)


state 91

    (93) fielddefs -> fielddef fielddefs .

    ;               reduce using rule 93 (fielddefs -> fielddef fielddefs .)


state 92

    (95) fielddef -> accessmodificator declaration .

    PRIVATE         reduce using rule 95 (fielddef -> accessmodificator declaration .)
    PROTECTED       reduce using rule 95 (fielddef -> accessmodificator declaration .)
    PUBLIC          reduce using rule 95 (fielddef -> accessmodificator declaration .)
    ;               reduce using rule 95 (fielddef -> accessmodificator declaration .)


state 93

    (4) declaration -> TYPE . inits ;
    (7) inits -> . inits , init
    (8) inits -> . init
    (9) init -> . id = expression
    (49) id -> . ID

    ID              shift and go to state 11

    init                           shift and go to state 48
    inits                          shift and go to state 49
    id                             shift and go to state 132

state 94

    (5) declaration -> id . classinits ;
    (10) classinits -> . classinits , classinit
    (11) classinits -> . classinit
    (12) classinit -> . id
    (49) id -> . ID

    ID              shift and go to state 11

    classinits                     shift and go to state 51
    id                             shift and go to state 139
    classinit                      shift and go to state 52

state 95

    (92) classcontent -> { fielddefs ; . methoddefs }
    (96) methoddefs -> . methoddef methoddefs
    (97) methoddefs -> .
    (98) methoddef -> . accessmodificator fundef
    (99) accessmodificator -> . PRIVATE
    (100) accessmodificator -> . PROTECTED
    (101) accessmodificator -> . PUBLIC

    }               reduce using rule 97 (methoddefs -> .)
    PRIVATE         shift and go to state 3
    PROTECTED       shift and go to state 4
    PUBLIC          shift and go to state 7

    accessmodificator              shift and go to state 144
    methoddef                      shift and go to state 142
    methoddefs                     shift and go to state 143

state 96

    (72) expression -> access ( . expr_list_or_empty )
    (73) expression -> access ( . error )
    (74) expr_list_or_empty -> . expr_list
    (75) expr_list_or_empty -> .
    (76) expr_list -> . expr_list , expression
    (77) expr_list -> . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    error           shift and go to state 147
    )               reduce using rule 75 (expr_list_or_empty -> .)
    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    expr_list_or_empty             shift and go to state 146
    string                         shift and go to state 65
    expr_list                      shift and go to state 145
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 148
    id                             shift and go to state 61
    const                          shift and go to state 62

state 97

    (71) expression -> ( error . )

    )               shift and go to state 149


state 98

    (70) expression -> ( expression . )
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    )               shift and go to state 150
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 99

    (60) expression -> expression AND . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 151
    id                             shift and go to state 61

state 100

    (63) expression -> expression SHR . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 152
    id                             shift and go to state 61

state 101

    (68) expression -> expression LE . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 153
    id                             shift and go to state 61

state 102

    (58) expression -> expression & . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 154
    id                             shift and go to state 61

state 103

    (67) expression -> expression < . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 155
    id                             shift and go to state 61

state 104

    (62) expression -> expression SHL . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 156
    id                             shift and go to state 61

state 105

    (52) expression -> expression + . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 157
    id                             shift and go to state 61

state 106

    (54) expression -> expression * . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 158
    id                             shift and go to state 61

state 107

    (53) expression -> expression - . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 159
    id                             shift and go to state 61

state 108

    (55) expression -> expression / . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 160
    id                             shift and go to state 61

state 109

    (61) expression -> expression OR . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 161
    id                             shift and go to state 61

state 110

    (64) expression -> expression EQ . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 162
    id                             shift and go to state 61

state 111

    (66) expression -> expression > . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 163
    id                             shift and go to state 61

state 112

    (69) expression -> expression GE . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 164
    id                             shift and go to state 61

state 113

    (56) expression -> expression % . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 165
    id                             shift and go to state 61

state 114

    (38) return_instr -> RETURN expression ; .

    }               reduce using rule 38 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 38 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 38 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 38 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 38 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 38 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 38 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 38 (return_instr -> RETURN expression ; .)
    {               reduce using rule 38 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 38 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 38 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 38 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 38 (return_instr -> RETURN expression ; .)


state 115

    (65) expression -> expression NEQ . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 166
    id                             shift and go to state 61

state 116

    (57) expression -> expression | . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 167
    id                             shift and go to state 61

state 117

    (59) expression -> expression ^ . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 168
    id                             shift and go to state 61

state 118

    (31) choice_instr -> IF ( condition . ) instruction
    (32) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 169


state 119

    (33) choice_instr -> IF ( error . ) instruction
    (34) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 170


state 120

    (42) condition -> expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               reduce using rule 42 (condition -> expression .)
    )               reduce using rule 42 (condition -> expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 121

    (26) print_instr -> PRINT error ; .

    UNTIL           reduce using rule 26 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 26 (print_instr -> PRINT error ; .)
    IF              reduce using rule 26 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 26 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 26 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 26 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 26 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 26 (print_instr -> PRINT error ; .)
    {               reduce using rule 26 (print_instr -> PRINT error ; .)
    ID              reduce using rule 26 (print_instr -> PRINT error ; .)
    }               reduce using rule 26 (print_instr -> PRINT error ; .)
    $end            reduce using rule 26 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 26 (print_instr -> PRINT error ; .)


state 122

    (25) print_instr -> PRINT expression ; .

    UNTIL           reduce using rule 25 (print_instr -> PRINT expression ; .)
    PRINT           reduce using rule 25 (print_instr -> PRINT expression ; .)
    IF              reduce using rule 25 (print_instr -> PRINT expression ; .)
    WHILE           reduce using rule 25 (print_instr -> PRINT expression ; .)
    REPEAT          reduce using rule 25 (print_instr -> PRINT expression ; .)
    RETURN          reduce using rule 25 (print_instr -> PRINT expression ; .)
    BREAK           reduce using rule 25 (print_instr -> PRINT expression ; .)
    CONTINUE        reduce using rule 25 (print_instr -> PRINT expression ; .)
    {               reduce using rule 25 (print_instr -> PRINT expression ; .)
    ID              reduce using rule 25 (print_instr -> PRINT expression ; .)
    }               reduce using rule 25 (print_instr -> PRINT expression ; .)
    $end            reduce using rule 25 (print_instr -> PRINT expression ; .)
    ELSE            reduce using rule 25 (print_instr -> PRINT expression ; .)


state 123

    (27) labeled_instr -> id : instruction .

    PRINT           reduce using rule 27 (labeled_instr -> id : instruction .)
    IF              reduce using rule 27 (labeled_instr -> id : instruction .)
    WHILE           reduce using rule 27 (labeled_instr -> id : instruction .)
    REPEAT          reduce using rule 27 (labeled_instr -> id : instruction .)
    RETURN          reduce using rule 27 (labeled_instr -> id : instruction .)
    BREAK           reduce using rule 27 (labeled_instr -> id : instruction .)
    CONTINUE        reduce using rule 27 (labeled_instr -> id : instruction .)
    {               reduce using rule 27 (labeled_instr -> id : instruction .)
    ID              reduce using rule 27 (labeled_instr -> id : instruction .)
    $end            reduce using rule 27 (labeled_instr -> id : instruction .)
    UNTIL           reduce using rule 27 (labeled_instr -> id : instruction .)
    }               reduce using rule 27 (labeled_instr -> id : instruction .)
    ELSE            reduce using rule 27 (labeled_instr -> id : instruction .)


state 124

    (30) access -> id . id .

    (               reduce using rule 30 (access -> id . id .)
    +               reduce using rule 30 (access -> id . id .)
    -               reduce using rule 30 (access -> id . id .)
    *               reduce using rule 30 (access -> id . id .)
    /               reduce using rule 30 (access -> id . id .)
    %               reduce using rule 30 (access -> id . id .)
    |               reduce using rule 30 (access -> id . id .)
    &               reduce using rule 30 (access -> id . id .)
    ^               reduce using rule 30 (access -> id . id .)
    AND             reduce using rule 30 (access -> id . id .)
    OR              reduce using rule 30 (access -> id . id .)
    SHL             reduce using rule 30 (access -> id . id .)
    SHR             reduce using rule 30 (access -> id . id .)
    EQ              reduce using rule 30 (access -> id . id .)
    NEQ             reduce using rule 30 (access -> id . id .)
    >               reduce using rule 30 (access -> id . id .)
    <               reduce using rule 30 (access -> id . id .)
    LE              reduce using rule 30 (access -> id . id .)
    GE              reduce using rule 30 (access -> id . id .)
    ;               reduce using rule 30 (access -> id . id .)
    )               reduce using rule 30 (access -> id . id .)
    ,               reduce using rule 30 (access -> id . id .)
    =               reduce using rule 30 (access -> id . id .)


state 125

    (28) assignment -> access = expression . ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               shift and go to state 171
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 126

    (37) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (42) condition -> . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    const                          shift and go to state 62
    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 120
    id                             shift and go to state 61
    condition                      shift and go to state 172

state 127

    (35) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 173


state 128

    (36) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 174


state 129

    (5) declaration -> id . classinits ;
    (27) labeled_instr -> id . : instruction
    (29) access -> id .
    (30) access -> id . . id
    (10) classinits -> . classinits , classinit
    (11) classinits -> . classinit
    (12) classinit -> . id
    (49) id -> . ID

    :               shift and go to state 72
    =               reduce using rule 29 (access -> id .)
    .               shift and go to state 73
    ID              shift and go to state 11

    classinits                     shift and go to state 51
    id                             shift and go to state 139
    classinit                      shift and go to state 52

state 130

    (41) compound_instr -> { declarations instructions . }
    (13) instructions -> instructions . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    }               shift and go to state 175
    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    instruction                    shift and go to state 76
    assignment                     shift and go to state 34
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28

state 131

    (7) inits -> inits , init .

    ;               reduce using rule 7 (inits -> inits , init .)
    ,               reduce using rule 7 (inits -> inits , init .)


state 132

    (9) init -> id . = expression

    =               shift and go to state 86


state 133

    (82) args_list_or_empty -> args_list .
    (84) args_list -> args_list . , arg

    )               reduce using rule 82 (args_list_or_empty -> args_list .)
    ,               shift and go to state 176


state 134

    (80) fundef -> TYPE id ( args_list_or_empty . ) compound_instr

    )               shift and go to state 177


state 135

    (85) args_list -> arg .

    ,               reduce using rule 85 (args_list -> arg .)
    )               reduce using rule 85 (args_list -> arg .)


state 136

    (86) arg -> TYPE . id
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 178

state 137

    (87) arg -> id . id
    (49) id -> . ID

    ID              shift and go to state 11

    id                             shift and go to state 179

state 138

    (9) init -> id = expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ;               reduce using rule 9 (init -> id = expression .)
    ,               reduce using rule 9 (init -> id = expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 139

    (12) classinit -> id .

    ;               reduce using rule 12 (classinit -> id .)
    ,               reduce using rule 12 (classinit -> id .)


state 140

    (10) classinits -> classinits , classinit .

    ;               reduce using rule 10 (classinits -> classinits , classinit .)
    ,               reduce using rule 10 (classinits -> classinits , classinit .)


state 141

    (81) fundef -> id id ( args_list_or_empty . ) compound_instr

    )               shift and go to state 180


state 142

    (96) methoddefs -> methoddef . methoddefs
    (96) methoddefs -> . methoddef methoddefs
    (97) methoddefs -> .
    (98) methoddef -> . accessmodificator fundef
    (99) accessmodificator -> . PRIVATE
    (100) accessmodificator -> . PROTECTED
    (101) accessmodificator -> . PUBLIC

    }               reduce using rule 97 (methoddefs -> .)
    PRIVATE         shift and go to state 3
    PROTECTED       shift and go to state 4
    PUBLIC          shift and go to state 7

    methoddef                      shift and go to state 142
    accessmodificator              shift and go to state 144
    methoddefs                     shift and go to state 181

state 143

    (92) classcontent -> { fielddefs ; methoddefs . }

    }               shift and go to state 182


state 144

    (98) methoddef -> accessmodificator . fundef
    (80) fundef -> . TYPE id ( args_list_or_empty ) compound_instr
    (81) fundef -> . id id ( args_list_or_empty ) compound_instr
    (49) id -> . ID

    TYPE            shift and go to state 45
    ID              shift and go to state 11

    id                             shift and go to state 46
    fundef                         shift and go to state 183

state 145

    (74) expr_list_or_empty -> expr_list .
    (76) expr_list -> expr_list . , expression

    )               reduce using rule 74 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 184


state 146

    (72) expression -> access ( expr_list_or_empty . )

    )               shift and go to state 185


state 147

    (73) expression -> access ( error . )

    )               shift and go to state 186


state 148

    (77) expr_list -> expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ,               reduce using rule 77 (expr_list -> expression .)
    )               reduce using rule 77 (expr_list -> expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 149

    (71) expression -> ( error ) .

    +               reduce using rule 71 (expression -> ( error ) .)
    -               reduce using rule 71 (expression -> ( error ) .)
    *               reduce using rule 71 (expression -> ( error ) .)
    /               reduce using rule 71 (expression -> ( error ) .)
    %               reduce using rule 71 (expression -> ( error ) .)
    |               reduce using rule 71 (expression -> ( error ) .)
    &               reduce using rule 71 (expression -> ( error ) .)
    ^               reduce using rule 71 (expression -> ( error ) .)
    AND             reduce using rule 71 (expression -> ( error ) .)
    OR              reduce using rule 71 (expression -> ( error ) .)
    SHL             reduce using rule 71 (expression -> ( error ) .)
    SHR             reduce using rule 71 (expression -> ( error ) .)
    EQ              reduce using rule 71 (expression -> ( error ) .)
    NEQ             reduce using rule 71 (expression -> ( error ) .)
    >               reduce using rule 71 (expression -> ( error ) .)
    <               reduce using rule 71 (expression -> ( error ) .)
    LE              reduce using rule 71 (expression -> ( error ) .)
    GE              reduce using rule 71 (expression -> ( error ) .)
    ,               reduce using rule 71 (expression -> ( error ) .)
    )               reduce using rule 71 (expression -> ( error ) .)
    ;               reduce using rule 71 (expression -> ( error ) .)


state 150

    (70) expression -> ( expression ) .

    +               reduce using rule 70 (expression -> ( expression ) .)
    -               reduce using rule 70 (expression -> ( expression ) .)
    *               reduce using rule 70 (expression -> ( expression ) .)
    /               reduce using rule 70 (expression -> ( expression ) .)
    %               reduce using rule 70 (expression -> ( expression ) .)
    |               reduce using rule 70 (expression -> ( expression ) .)
    &               reduce using rule 70 (expression -> ( expression ) .)
    ^               reduce using rule 70 (expression -> ( expression ) .)
    AND             reduce using rule 70 (expression -> ( expression ) .)
    OR              reduce using rule 70 (expression -> ( expression ) .)
    SHL             reduce using rule 70 (expression -> ( expression ) .)
    SHR             reduce using rule 70 (expression -> ( expression ) .)
    EQ              reduce using rule 70 (expression -> ( expression ) .)
    NEQ             reduce using rule 70 (expression -> ( expression ) .)
    >               reduce using rule 70 (expression -> ( expression ) .)
    <               reduce using rule 70 (expression -> ( expression ) .)
    LE              reduce using rule 70 (expression -> ( expression ) .)
    GE              reduce using rule 70 (expression -> ( expression ) .)
    ,               reduce using rule 70 (expression -> ( expression ) .)
    )               reduce using rule 70 (expression -> ( expression ) .)
    ;               reduce using rule 70 (expression -> ( expression ) .)


state 151

    (60) expression -> expression AND expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    AND             reduce using rule 60 (expression -> expression AND expression .)
    OR              reduce using rule 60 (expression -> expression AND expression .)
    ,               reduce using rule 60 (expression -> expression AND expression .)
    )               reduce using rule 60 (expression -> expression AND expression .)
    ;               reduce using rule 60 (expression -> expression AND expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112

  ! +               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]


state 152

    (63) expression -> expression SHR expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression SHR expression .)
    &               reduce using rule 63 (expression -> expression SHR expression .)
    ^               reduce using rule 63 (expression -> expression SHR expression .)
    AND             reduce using rule 63 (expression -> expression SHR expression .)
    OR              reduce using rule 63 (expression -> expression SHR expression .)
    SHL             reduce using rule 63 (expression -> expression SHR expression .)
    SHR             reduce using rule 63 (expression -> expression SHR expression .)
    EQ              reduce using rule 63 (expression -> expression SHR expression .)
    NEQ             reduce using rule 63 (expression -> expression SHR expression .)
    >               reduce using rule 63 (expression -> expression SHR expression .)
    <               reduce using rule 63 (expression -> expression SHR expression .)
    LE              reduce using rule 63 (expression -> expression SHR expression .)
    GE              reduce using rule 63 (expression -> expression SHR expression .)
    ,               reduce using rule 63 (expression -> expression SHR expression .)
    )               reduce using rule 63 (expression -> expression SHR expression .)
    ;               reduce using rule 63 (expression -> expression SHR expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113

  ! +               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 153

    (68) expression -> expression LE expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 68 (expression -> expression LE expression .)
    &               reduce using rule 68 (expression -> expression LE expression .)
    ^               reduce using rule 68 (expression -> expression LE expression .)
    AND             reduce using rule 68 (expression -> expression LE expression .)
    OR              reduce using rule 68 (expression -> expression LE expression .)
    EQ              reduce using rule 68 (expression -> expression LE expression .)
    NEQ             reduce using rule 68 (expression -> expression LE expression .)
    >               reduce using rule 68 (expression -> expression LE expression .)
    <               reduce using rule 68 (expression -> expression LE expression .)
    LE              reduce using rule 68 (expression -> expression LE expression .)
    GE              reduce using rule 68 (expression -> expression LE expression .)
    ,               reduce using rule 68 (expression -> expression LE expression .)
    )               reduce using rule 68 (expression -> expression LE expression .)
    ;               reduce using rule 68 (expression -> expression LE expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100

  ! +               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 68 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 154

    (58) expression -> expression & expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 58 (expression -> expression & expression .)
    &               reduce using rule 58 (expression -> expression & expression .)
    ^               reduce using rule 58 (expression -> expression & expression .)
    AND             reduce using rule 58 (expression -> expression & expression .)
    OR              reduce using rule 58 (expression -> expression & expression .)
    ,               reduce using rule 58 (expression -> expression & expression .)
    )               reduce using rule 58 (expression -> expression & expression .)
    ;               reduce using rule 58 (expression -> expression & expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112

  ! +               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 58 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]


state 155

    (67) expression -> expression < expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 67 (expression -> expression < expression .)
    &               reduce using rule 67 (expression -> expression < expression .)
    ^               reduce using rule 67 (expression -> expression < expression .)
    AND             reduce using rule 67 (expression -> expression < expression .)
    OR              reduce using rule 67 (expression -> expression < expression .)
    EQ              reduce using rule 67 (expression -> expression < expression .)
    NEQ             reduce using rule 67 (expression -> expression < expression .)
    >               reduce using rule 67 (expression -> expression < expression .)
    <               reduce using rule 67 (expression -> expression < expression .)
    LE              reduce using rule 67 (expression -> expression < expression .)
    GE              reduce using rule 67 (expression -> expression < expression .)
    ,               reduce using rule 67 (expression -> expression < expression .)
    )               reduce using rule 67 (expression -> expression < expression .)
    ;               reduce using rule 67 (expression -> expression < expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100

  ! +               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 67 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 67 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 67 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 156

    (62) expression -> expression SHL expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression SHL expression .)
    &               reduce using rule 62 (expression -> expression SHL expression .)
    ^               reduce using rule 62 (expression -> expression SHL expression .)
    AND             reduce using rule 62 (expression -> expression SHL expression .)
    OR              reduce using rule 62 (expression -> expression SHL expression .)
    SHL             reduce using rule 62 (expression -> expression SHL expression .)
    SHR             reduce using rule 62 (expression -> expression SHL expression .)
    EQ              reduce using rule 62 (expression -> expression SHL expression .)
    NEQ             reduce using rule 62 (expression -> expression SHL expression .)
    >               reduce using rule 62 (expression -> expression SHL expression .)
    <               reduce using rule 62 (expression -> expression SHL expression .)
    LE              reduce using rule 62 (expression -> expression SHL expression .)
    GE              reduce using rule 62 (expression -> expression SHL expression .)
    ,               reduce using rule 62 (expression -> expression SHL expression .)
    )               reduce using rule 62 (expression -> expression SHL expression .)
    ;               reduce using rule 62 (expression -> expression SHL expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113

  ! +               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 157

    (52) expression -> expression + expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 52 (expression -> expression + expression .)
    -               reduce using rule 52 (expression -> expression + expression .)
    |               reduce using rule 52 (expression -> expression + expression .)
    &               reduce using rule 52 (expression -> expression + expression .)
    ^               reduce using rule 52 (expression -> expression + expression .)
    AND             reduce using rule 52 (expression -> expression + expression .)
    OR              reduce using rule 52 (expression -> expression + expression .)
    SHL             reduce using rule 52 (expression -> expression + expression .)
    SHR             reduce using rule 52 (expression -> expression + expression .)
    EQ              reduce using rule 52 (expression -> expression + expression .)
    NEQ             reduce using rule 52 (expression -> expression + expression .)
    >               reduce using rule 52 (expression -> expression + expression .)
    <               reduce using rule 52 (expression -> expression + expression .)
    LE              reduce using rule 52 (expression -> expression + expression .)
    GE              reduce using rule 52 (expression -> expression + expression .)
    ,               reduce using rule 52 (expression -> expression + expression .)
    )               reduce using rule 52 (expression -> expression + expression .)
    ;               reduce using rule 52 (expression -> expression + expression .)
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113

  ! *               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 105 ]
  ! -               [ shift and go to state 107 ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 158

    (54) expression -> expression * expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 54 (expression -> expression * expression .)
    -               reduce using rule 54 (expression -> expression * expression .)
    *               reduce using rule 54 (expression -> expression * expression .)
    /               reduce using rule 54 (expression -> expression * expression .)
    %               reduce using rule 54 (expression -> expression * expression .)
    |               reduce using rule 54 (expression -> expression * expression .)
    &               reduce using rule 54 (expression -> expression * expression .)
    ^               reduce using rule 54 (expression -> expression * expression .)
    AND             reduce using rule 54 (expression -> expression * expression .)
    OR              reduce using rule 54 (expression -> expression * expression .)
    SHL             reduce using rule 54 (expression -> expression * expression .)
    SHR             reduce using rule 54 (expression -> expression * expression .)
    EQ              reduce using rule 54 (expression -> expression * expression .)
    NEQ             reduce using rule 54 (expression -> expression * expression .)
    >               reduce using rule 54 (expression -> expression * expression .)
    <               reduce using rule 54 (expression -> expression * expression .)
    LE              reduce using rule 54 (expression -> expression * expression .)
    GE              reduce using rule 54 (expression -> expression * expression .)
    ,               reduce using rule 54 (expression -> expression * expression .)
    )               reduce using rule 54 (expression -> expression * expression .)
    ;               reduce using rule 54 (expression -> expression * expression .)

  ! +               [ shift and go to state 105 ]
  ! -               [ shift and go to state 107 ]
  ! *               [ shift and go to state 106 ]
  ! /               [ shift and go to state 108 ]
  ! %               [ shift and go to state 113 ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 159

    (53) expression -> expression - expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 53 (expression -> expression - expression .)
    -               reduce using rule 53 (expression -> expression - expression .)
    |               reduce using rule 53 (expression -> expression - expression .)
    &               reduce using rule 53 (expression -> expression - expression .)
    ^               reduce using rule 53 (expression -> expression - expression .)
    AND             reduce using rule 53 (expression -> expression - expression .)
    OR              reduce using rule 53 (expression -> expression - expression .)
    SHL             reduce using rule 53 (expression -> expression - expression .)
    SHR             reduce using rule 53 (expression -> expression - expression .)
    EQ              reduce using rule 53 (expression -> expression - expression .)
    NEQ             reduce using rule 53 (expression -> expression - expression .)
    >               reduce using rule 53 (expression -> expression - expression .)
    <               reduce using rule 53 (expression -> expression - expression .)
    LE              reduce using rule 53 (expression -> expression - expression .)
    GE              reduce using rule 53 (expression -> expression - expression .)
    ,               reduce using rule 53 (expression -> expression - expression .)
    )               reduce using rule 53 (expression -> expression - expression .)
    ;               reduce using rule 53 (expression -> expression - expression .)
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113

  ! *               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 105 ]
  ! -               [ shift and go to state 107 ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 160

    (55) expression -> expression / expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 55 (expression -> expression / expression .)
    -               reduce using rule 55 (expression -> expression / expression .)
    *               reduce using rule 55 (expression -> expression / expression .)
    /               reduce using rule 55 (expression -> expression / expression .)
    %               reduce using rule 55 (expression -> expression / expression .)
    |               reduce using rule 55 (expression -> expression / expression .)
    &               reduce using rule 55 (expression -> expression / expression .)
    ^               reduce using rule 55 (expression -> expression / expression .)
    AND             reduce using rule 55 (expression -> expression / expression .)
    OR              reduce using rule 55 (expression -> expression / expression .)
    SHL             reduce using rule 55 (expression -> expression / expression .)
    SHR             reduce using rule 55 (expression -> expression / expression .)
    EQ              reduce using rule 55 (expression -> expression / expression .)
    NEQ             reduce using rule 55 (expression -> expression / expression .)
    >               reduce using rule 55 (expression -> expression / expression .)
    <               reduce using rule 55 (expression -> expression / expression .)
    LE              reduce using rule 55 (expression -> expression / expression .)
    GE              reduce using rule 55 (expression -> expression / expression .)
    ,               reduce using rule 55 (expression -> expression / expression .)
    )               reduce using rule 55 (expression -> expression / expression .)
    ;               reduce using rule 55 (expression -> expression / expression .)

  ! +               [ shift and go to state 105 ]
  ! -               [ shift and go to state 107 ]
  ! *               [ shift and go to state 106 ]
  ! /               [ shift and go to state 108 ]
  ! %               [ shift and go to state 113 ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 161

    (61) expression -> expression OR expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    OR              reduce using rule 61 (expression -> expression OR expression .)
    ,               reduce using rule 61 (expression -> expression OR expression .)
    )               reduce using rule 61 (expression -> expression OR expression .)
    ;               reduce using rule 61 (expression -> expression OR expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112

  ! +               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 109 ]


state 162

    (64) expression -> expression EQ expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 64 (expression -> expression EQ expression .)
    &               reduce using rule 64 (expression -> expression EQ expression .)
    ^               reduce using rule 64 (expression -> expression EQ expression .)
    AND             reduce using rule 64 (expression -> expression EQ expression .)
    OR              reduce using rule 64 (expression -> expression EQ expression .)
    EQ              reduce using rule 64 (expression -> expression EQ expression .)
    NEQ             reduce using rule 64 (expression -> expression EQ expression .)
    >               reduce using rule 64 (expression -> expression EQ expression .)
    <               reduce using rule 64 (expression -> expression EQ expression .)
    LE              reduce using rule 64 (expression -> expression EQ expression .)
    GE              reduce using rule 64 (expression -> expression EQ expression .)
    ,               reduce using rule 64 (expression -> expression EQ expression .)
    )               reduce using rule 64 (expression -> expression EQ expression .)
    ;               reduce using rule 64 (expression -> expression EQ expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100

  ! +               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 64 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 163

    (66) expression -> expression > expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 66 (expression -> expression > expression .)
    &               reduce using rule 66 (expression -> expression > expression .)
    ^               reduce using rule 66 (expression -> expression > expression .)
    AND             reduce using rule 66 (expression -> expression > expression .)
    OR              reduce using rule 66 (expression -> expression > expression .)
    EQ              reduce using rule 66 (expression -> expression > expression .)
    NEQ             reduce using rule 66 (expression -> expression > expression .)
    >               reduce using rule 66 (expression -> expression > expression .)
    <               reduce using rule 66 (expression -> expression > expression .)
    LE              reduce using rule 66 (expression -> expression > expression .)
    GE              reduce using rule 66 (expression -> expression > expression .)
    ,               reduce using rule 66 (expression -> expression > expression .)
    )               reduce using rule 66 (expression -> expression > expression .)
    ;               reduce using rule 66 (expression -> expression > expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100

  ! +               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 66 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 66 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 66 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 164

    (69) expression -> expression GE expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 69 (expression -> expression GE expression .)
    &               reduce using rule 69 (expression -> expression GE expression .)
    ^               reduce using rule 69 (expression -> expression GE expression .)
    AND             reduce using rule 69 (expression -> expression GE expression .)
    OR              reduce using rule 69 (expression -> expression GE expression .)
    EQ              reduce using rule 69 (expression -> expression GE expression .)
    NEQ             reduce using rule 69 (expression -> expression GE expression .)
    >               reduce using rule 69 (expression -> expression GE expression .)
    <               reduce using rule 69 (expression -> expression GE expression .)
    LE              reduce using rule 69 (expression -> expression GE expression .)
    GE              reduce using rule 69 (expression -> expression GE expression .)
    ,               reduce using rule 69 (expression -> expression GE expression .)
    )               reduce using rule 69 (expression -> expression GE expression .)
    ;               reduce using rule 69 (expression -> expression GE expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100

  ! +               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 69 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 165

    (56) expression -> expression % expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    +               reduce using rule 56 (expression -> expression % expression .)
    -               reduce using rule 56 (expression -> expression % expression .)
    *               reduce using rule 56 (expression -> expression % expression .)
    /               reduce using rule 56 (expression -> expression % expression .)
    %               reduce using rule 56 (expression -> expression % expression .)
    |               reduce using rule 56 (expression -> expression % expression .)
    &               reduce using rule 56 (expression -> expression % expression .)
    ^               reduce using rule 56 (expression -> expression % expression .)
    AND             reduce using rule 56 (expression -> expression % expression .)
    OR              reduce using rule 56 (expression -> expression % expression .)
    SHL             reduce using rule 56 (expression -> expression % expression .)
    SHR             reduce using rule 56 (expression -> expression % expression .)
    EQ              reduce using rule 56 (expression -> expression % expression .)
    NEQ             reduce using rule 56 (expression -> expression % expression .)
    >               reduce using rule 56 (expression -> expression % expression .)
    <               reduce using rule 56 (expression -> expression % expression .)
    LE              reduce using rule 56 (expression -> expression % expression .)
    GE              reduce using rule 56 (expression -> expression % expression .)
    ,               reduce using rule 56 (expression -> expression % expression .)
    )               reduce using rule 56 (expression -> expression % expression .)
    ;               reduce using rule 56 (expression -> expression % expression .)

  ! +               [ shift and go to state 105 ]
  ! -               [ shift and go to state 107 ]
  ! *               [ shift and go to state 106 ]
  ! /               [ shift and go to state 108 ]
  ! %               [ shift and go to state 113 ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! SHL             [ shift and go to state 104 ]
  ! SHR             [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 166

    (65) expression -> expression NEQ expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 65 (expression -> expression NEQ expression .)
    &               reduce using rule 65 (expression -> expression NEQ expression .)
    ^               reduce using rule 65 (expression -> expression NEQ expression .)
    AND             reduce using rule 65 (expression -> expression NEQ expression .)
    OR              reduce using rule 65 (expression -> expression NEQ expression .)
    EQ              reduce using rule 65 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 65 (expression -> expression NEQ expression .)
    >               reduce using rule 65 (expression -> expression NEQ expression .)
    <               reduce using rule 65 (expression -> expression NEQ expression .)
    LE              reduce using rule 65 (expression -> expression NEQ expression .)
    GE              reduce using rule 65 (expression -> expression NEQ expression .)
    ,               reduce using rule 65 (expression -> expression NEQ expression .)
    )               reduce using rule 65 (expression -> expression NEQ expression .)
    ;               reduce using rule 65 (expression -> expression NEQ expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    SHL             shift and go to state 104
    SHR             shift and go to state 100

  ! +               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 65 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 116 ]
  ! &               [ shift and go to state 102 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 110 ]
  ! NEQ             [ shift and go to state 115 ]
  ! >               [ shift and go to state 111 ]
  ! <               [ shift and go to state 103 ]
  ! LE              [ shift and go to state 101 ]
  ! GE              [ shift and go to state 112 ]


state 167

    (57) expression -> expression | expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression | expression .)
    AND             reduce using rule 57 (expression -> expression | expression .)
    OR              reduce using rule 57 (expression -> expression | expression .)
    ,               reduce using rule 57 (expression -> expression | expression .)
    )               reduce using rule 57 (expression -> expression | expression .)
    ;               reduce using rule 57 (expression -> expression | expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    &               shift and go to state 102
    ^               shift and go to state 117
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112

  ! +               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 57 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 57 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 57 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 116 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]


state 168

    (59) expression -> expression ^ expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    |               reduce using rule 59 (expression -> expression ^ expression .)
    ^               reduce using rule 59 (expression -> expression ^ expression .)
    AND             reduce using rule 59 (expression -> expression ^ expression .)
    OR              reduce using rule 59 (expression -> expression ^ expression .)
    ,               reduce using rule 59 (expression -> expression ^ expression .)
    )               reduce using rule 59 (expression -> expression ^ expression .)
    ;               reduce using rule 59 (expression -> expression ^ expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    &               shift and go to state 102
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112

  ! +               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 116 ]
  ! ^               [ shift and go to state 117 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 109 ]


state 169

    (31) choice_instr -> IF ( condition ) . instruction
    (32) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 187
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    repeat_instr                   shift and go to state 28
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27

state 170

    (33) choice_instr -> IF ( error ) . instruction
    (34) choice_instr -> IF ( error ) . instruction ELSE instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 188
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    while_instr                    shift and go to state 31
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    labeled_instr                  shift and go to state 35
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28

state 171

    (28) assignment -> access = expression ; .

    PRINT           reduce using rule 28 (assignment -> access = expression ; .)
    IF              reduce using rule 28 (assignment -> access = expression ; .)
    WHILE           reduce using rule 28 (assignment -> access = expression ; .)
    REPEAT          reduce using rule 28 (assignment -> access = expression ; .)
    RETURN          reduce using rule 28 (assignment -> access = expression ; .)
    BREAK           reduce using rule 28 (assignment -> access = expression ; .)
    CONTINUE        reduce using rule 28 (assignment -> access = expression ; .)
    {               reduce using rule 28 (assignment -> access = expression ; .)
    ID              reduce using rule 28 (assignment -> access = expression ; .)
    $end            reduce using rule 28 (assignment -> access = expression ; .)
    UNTIL           reduce using rule 28 (assignment -> access = expression ; .)
    }               reduce using rule 28 (assignment -> access = expression ; .)
    ELSE            reduce using rule 28 (assignment -> access = expression ; .)


state 172

    (37) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 189


state 173

    (35) while_instr -> WHILE ( condition ) . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 190
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    repeat_instr                   shift and go to state 28
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27

state 174

    (36) while_instr -> WHILE ( error ) . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 191
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    while_instr                    shift and go to state 31
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    labeled_instr                  shift and go to state 35
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28

state 175

    (41) compound_instr -> { declarations instructions } .

    PRINT           reduce using rule 41 (compound_instr -> { declarations instructions } .)
    IF              reduce using rule 41 (compound_instr -> { declarations instructions } .)
    WHILE           reduce using rule 41 (compound_instr -> { declarations instructions } .)
    REPEAT          reduce using rule 41 (compound_instr -> { declarations instructions } .)
    RETURN          reduce using rule 41 (compound_instr -> { declarations instructions } .)
    BREAK           reduce using rule 41 (compound_instr -> { declarations instructions } .)
    CONTINUE        reduce using rule 41 (compound_instr -> { declarations instructions } .)
    {               reduce using rule 41 (compound_instr -> { declarations instructions } .)
    ID              reduce using rule 41 (compound_instr -> { declarations instructions } .)
    $end            reduce using rule 41 (compound_instr -> { declarations instructions } .)
    UNTIL           reduce using rule 41 (compound_instr -> { declarations instructions } .)
    }               reduce using rule 41 (compound_instr -> { declarations instructions } .)
    ELSE            reduce using rule 41 (compound_instr -> { declarations instructions } .)
    TYPE            reduce using rule 41 (compound_instr -> { declarations instructions } .)
    PRIVATE         reduce using rule 41 (compound_instr -> { declarations instructions } .)
    PROTECTED       reduce using rule 41 (compound_instr -> { declarations instructions } .)
    PUBLIC          reduce using rule 41 (compound_instr -> { declarations instructions } .)


state 176

    (84) args_list -> args_list , . arg
    (86) arg -> . TYPE id
    (87) arg -> . id id
    (49) id -> . ID

    TYPE            shift and go to state 136
    ID              shift and go to state 11

    arg                            shift and go to state 192
    id                             shift and go to state 137

state 177

    (80) fundef -> TYPE id ( args_list_or_empty ) . compound_instr
    (41) compound_instr -> . { declarations instructions }

    {               shift and go to state 43

    compound_instr                 shift and go to state 193

state 178

    (86) arg -> TYPE id .

    ,               reduce using rule 86 (arg -> TYPE id .)
    )               reduce using rule 86 (arg -> TYPE id .)


state 179

    (87) arg -> id id .

    ,               reduce using rule 87 (arg -> id id .)
    )               reduce using rule 87 (arg -> id id .)


state 180

    (81) fundef -> id id ( args_list_or_empty ) . compound_instr
    (41) compound_instr -> . { declarations instructions }

    {               shift and go to state 43

    compound_instr                 shift and go to state 194

state 181

    (96) methoddefs -> methoddef methoddefs .

    }               reduce using rule 96 (methoddefs -> methoddef methoddefs .)


state 182

    (92) classcontent -> { fielddefs ; methoddefs } .

    PRIVATE         reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    PROTECTED       reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    PUBLIC          reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    TYPE            reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    error           reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    ID              reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    PRINT           reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    IF              reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    WHILE           reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    REPEAT          reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    RETURN          reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    BREAK           reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    CONTINUE        reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)
    {               reduce using rule 92 (classcontent -> { fielddefs ; methoddefs } .)


state 183

    (98) methoddef -> accessmodificator fundef .

    PRIVATE         reduce using rule 98 (methoddef -> accessmodificator fundef .)
    PROTECTED       reduce using rule 98 (methoddef -> accessmodificator fundef .)
    PUBLIC          reduce using rule 98 (methoddef -> accessmodificator fundef .)
    }               reduce using rule 98 (methoddef -> accessmodificator fundef .)


state 184

    (76) expr_list -> expr_list , . expression
    (50) expression -> . const
    (51) expression -> . access
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression % expression
    (57) expression -> . expression | expression
    (58) expression -> . expression & expression
    (59) expression -> . expression ^ expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression SHL expression
    (63) expression -> . expression SHR expression
    (64) expression -> . expression EQ expression
    (65) expression -> . expression NEQ expression
    (66) expression -> . expression > expression
    (67) expression -> . expression < expression
    (68) expression -> . expression LE expression
    (69) expression -> . expression GE expression
    (70) expression -> . ( expression )
    (71) expression -> . ( error )
    (72) expression -> . access ( expr_list_or_empty )
    (73) expression -> . access ( error )
    (43) const -> . integer
    (44) const -> . float
    (45) const -> . string
    (29) access -> . id
    (30) access -> . id . id
    (46) integer -> . INTEGER
    (47) float -> . FLOAT
    (48) string -> . STRING
    (49) id -> . ID

    (               shift and go to state 67
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 66
    STRING          shift and go to state 59
    ID              shift and go to state 11

    string                         shift and go to state 65
    float                          shift and go to state 58
    access                         shift and go to state 63
    integer                        shift and go to state 60
    expression                     shift and go to state 195
    id                             shift and go to state 61
    const                          shift and go to state 62

state 185

    (72) expression -> access ( expr_list_or_empty ) .

    +               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    -               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    *               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    /               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    %               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    |               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    &               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    ^               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    AND             reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    OR              reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    SHL             reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    SHR             reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    EQ              reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    NEQ             reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    >               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    <               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    LE              reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    GE              reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    ,               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    )               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)
    ;               reduce using rule 72 (expression -> access ( expr_list_or_empty ) .)


state 186

    (73) expression -> access ( error ) .

    +               reduce using rule 73 (expression -> access ( error ) .)
    -               reduce using rule 73 (expression -> access ( error ) .)
    *               reduce using rule 73 (expression -> access ( error ) .)
    /               reduce using rule 73 (expression -> access ( error ) .)
    %               reduce using rule 73 (expression -> access ( error ) .)
    |               reduce using rule 73 (expression -> access ( error ) .)
    &               reduce using rule 73 (expression -> access ( error ) .)
    ^               reduce using rule 73 (expression -> access ( error ) .)
    AND             reduce using rule 73 (expression -> access ( error ) .)
    OR              reduce using rule 73 (expression -> access ( error ) .)
    SHL             reduce using rule 73 (expression -> access ( error ) .)
    SHR             reduce using rule 73 (expression -> access ( error ) .)
    EQ              reduce using rule 73 (expression -> access ( error ) .)
    NEQ             reduce using rule 73 (expression -> access ( error ) .)
    >               reduce using rule 73 (expression -> access ( error ) .)
    <               reduce using rule 73 (expression -> access ( error ) .)
    LE              reduce using rule 73 (expression -> access ( error ) .)
    GE              reduce using rule 73 (expression -> access ( error ) .)
    ,               reduce using rule 73 (expression -> access ( error ) .)
    )               reduce using rule 73 (expression -> access ( error ) .)
    ;               reduce using rule 73 (expression -> access ( error ) .)


state 187

    (31) choice_instr -> IF ( condition ) instruction .
    (32) choice_instr -> IF ( condition ) instruction . ELSE instruction

    PRINT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 31 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 196

  ! ELSE            [ reduce using rule 31 (choice_instr -> IF ( condition ) instruction .) ]


state 188

    (33) choice_instr -> IF ( error ) instruction .
    (34) choice_instr -> IF ( error ) instruction . ELSE instruction

    PRINT           reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 33 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 197

  ! ELSE            [ reduce using rule 33 (choice_instr -> IF ( error ) instruction .) ]


state 189

    (37) repeat_instr -> REPEAT instructions UNTIL condition ; .

    }               reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    PRINT           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 37 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 190

    (35) while_instr -> WHILE ( condition ) instruction .

    PRINT           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 35 (while_instr -> WHILE ( condition ) instruction .)


state 191

    (36) while_instr -> WHILE ( error ) instruction .

    PRINT           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 36 (while_instr -> WHILE ( error ) instruction .)


state 192

    (84) args_list -> args_list , arg .

    ,               reduce using rule 84 (args_list -> args_list , arg .)
    )               reduce using rule 84 (args_list -> args_list , arg .)


state 193

    (80) fundef -> TYPE id ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    PRIVATE         reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    PROTECTED       reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    PUBLIC          reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)
    }               reduce using rule 80 (fundef -> TYPE id ( args_list_or_empty ) compound_instr .)


state 194

    (81) fundef -> id id ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    PRIVATE         reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    PROTECTED       reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    PUBLIC          reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)
    }               reduce using rule 81 (fundef -> id id ( args_list_or_empty ) compound_instr .)


state 195

    (76) expr_list -> expr_list , expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . % expression
    (57) expression -> expression . | expression
    (58) expression -> expression . & expression
    (59) expression -> expression . ^ expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . SHL expression
    (63) expression -> expression . SHR expression
    (64) expression -> expression . EQ expression
    (65) expression -> expression . NEQ expression
    (66) expression -> expression . > expression
    (67) expression -> expression . < expression
    (68) expression -> expression . LE expression
    (69) expression -> expression . GE expression

    ,               reduce using rule 76 (expr_list -> expr_list , expression .)
    )               reduce using rule 76 (expr_list -> expr_list , expression .)
    +               shift and go to state 105
    -               shift and go to state 107
    *               shift and go to state 106
    /               shift and go to state 108
    %               shift and go to state 113
    |               shift and go to state 116
    &               shift and go to state 102
    ^               shift and go to state 117
    AND             shift and go to state 99
    OR              shift and go to state 109
    SHL             shift and go to state 104
    SHR             shift and go to state 100
    EQ              shift and go to state 110
    NEQ             shift and go to state 115
    >               shift and go to state 111
    <               shift and go to state 103
    LE              shift and go to state 101
    GE              shift and go to state 112


state 196

    (32) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 198
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    labeled_instr                  shift and go to state 35
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    repeat_instr                   shift and go to state 28
    break_instr                    shift and go to state 38
    while_instr                    shift and go to state 31
    id                             shift and go to state 27

state 197

    (34) choice_instr -> IF ( error ) instruction ELSE . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . id : instruction
    (28) assignment -> . access = expression ;
    (31) choice_instr -> . IF ( condition ) instruction
    (32) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (33) choice_instr -> . IF ( error ) instruction
    (34) choice_instr -> . IF ( error ) instruction ELSE instruction
    (35) while_instr -> . WHILE ( condition ) instruction
    (36) while_instr -> . WHILE ( error ) instruction
    (37) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (38) return_instr -> . RETURN expression ;
    (40) break_instr -> . BREAK ;
    (39) continue_instr -> . CONTINUE ;
    (41) compound_instr -> . { declarations instructions }
    (49) id -> . ID
    (29) access -> . id
    (30) access -> . id . id

    PRINT           shift and go to state 26
    IF              shift and go to state 25
    WHILE           shift and go to state 39
    REPEAT          shift and go to state 33
    RETURN          shift and go to state 23
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 42
    {               shift and go to state 43
    ID              shift and go to state 11

    return_instr                   shift and go to state 29
    assignment                     shift and go to state 34
    instruction                    shift and go to state 199
    compound_instr                 shift and go to state 36
    continue_instr                 shift and go to state 30
    while_instr                    shift and go to state 31
    access                         shift and go to state 32
    print_instr                    shift and go to state 41
    choice_instr                   shift and go to state 24
    break_instr                    shift and go to state 38
    labeled_instr                  shift and go to state 35
    id                             shift and go to state 27
    repeat_instr                   shift and go to state 28

state 198

    (32) choice_instr -> IF ( condition ) instruction ELSE instruction .

    PRINT           reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 32 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 199

    (34) choice_instr -> IF ( error ) instruction ELSE instruction .

    PRINT           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 34 (choice_instr -> IF ( error ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 10 resolved as shift
WARNING: shift/reduce conflict for ID in state 14 resolved as shift
